generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model community {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  image       String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model follow {
  id                             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  follower_id                    String?  @db.Uuid
  following_id                   String?  @db.Uuid
  created_at                     DateTime @default(now()) @db.Timestamp(6)
  updated_at                     DateTime @default(now()) @db.Timestamp(6)
  user_follow_follower_idTouser  user?    @relation("follow_follower_idTouser", fields: [follower_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_follow_following_idTouser user?    @relation("follow_following_idTouser", fields: [following_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model identity_card {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String?  @db.Uuid
  verified   Boolean? @default(false)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  user       user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model post {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content    String   @db.VarChar(255)
  user_id    String?  @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  user       user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                               String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                            String          @unique @db.VarChar(255)
  firstName                        String?         @db.VarChar(255)
  lastName                         String?         @db.VarChar(255)
  roq_user_id                      String          @db.VarChar(255)
  tenant_id                        String          @db.VarChar(255)
  created_at                       DateTime        @default(now()) @db.Timestamp(6)
  updated_at                       DateTime        @default(now()) @db.Timestamp(6)
  community                        community[]
  follow_follow_follower_idTouser  follow[]        @relation("follow_follower_idTouser")
  follow_follow_following_idTouser follow[]        @relation("follow_following_idTouser")
  identity_card                    identity_card[]
  post                             post[]
}
